　　Go实现的HTTPserver拥有非常优秀的性能。



　　通过net/HTTP标准库，我们可以启动一个HTTP服务器,然后让这个服务器接收请求并返回响应。net/HTTP标准库还提供了一个连接多路复用器(multiplexer)的接口以及一个默认的多路复用器。

　　ServeMux是一个HTTP请求多路复用器，它负责接收HTTP请求并根据请求中的URL将请求重定向到正确的处理器，ServeMux也实现了ServeHTTP方法,它也是一个处理器。当ServeMux的ServeHTTP方法接收到一个请求的时候，它会在结构的映射里面找出与被请求URL最为匹配的URL，然后调用与之相对应的处理器的ServeHTTP方法。


　　因为ServeMux是一个结构而不是一个接口，所以DefaultServeMux并不是ServeMux的实现。DefaultServeMux实际上是ServeMux的一个实例，并且所有引入了net/HTTP标准库的程序都可以使用这个实例。当用户没有为Server结构指定处理器时，服务器就会使用DefaultServeMux作为ServeMux的默认实例。

　　上边的例子中，请求URL/hello完美的匹配了多路复用器绑定的URL，但是如果我们使用浏览器访问/hello/china呢？那么服务器会返回什么响应呢？


　　匹配不成功的URL会根据URL的层级逐层下降，直到最终落到根URL上。当浏览器访问/hello/china时，会返回404。如果被绑定的url不是以/结尾，那么它只能会与完全相同的url匹配；但是如果被绑定的url以/结尾，那么即使请求的url只有前缀部分与被绑定的url相同，ServeMux也会认为这两个url是匹配的。

　　http包的默认路由 DefaultServeMux 是ServeMux 结构体的实例http.Handle("/",http.FileServer(http.Dir(*dir)))的调用，会把path信息和自定义的方法信息保存到 DefaultServeMux 的 mmap[string]muxEntry变量里，ServeMux 中保存了path和Handler 的对应关系，也是路由关系。下面ServeMux 的定义：

　　type ServeMux struct{

　　	mu sync.RWMutex

　　	m map[string] muxEntry

　　	es [] muxEntry//数组切片

　　	hosts bool//是否任意一种模式都包含host名字

　　}

　　	type muxEntry struct{

　　	h Handler

　　	pattern string

　　	}

　　muxEntry 中的 hHandler 对就的就是我们自定义的Handler方法比如，我们自己例子中的方法 func(*myHandler)ServeHTTP(whttp.ResponseWriter,r*http.Request)，接口Hanlder设置了签名规则，也就是我们自定义的处理方法。

　　type Handler interface{

　　	ServeHTTP(ResponseWriter,*Request)

　　	}

　　所有的自定义类型都可以实现自己的方法，http包是用一个自定义的func来去实现了Handler接口。

　　type HandlerFuncfunc(ResponseWriter,*Request)

　　	//ServeHTTPcallsf(w,r).

　　		func(f HandlerFunc)ServeHTTP(w ResponseWriter,r *Request){

　　			f(w,r)

　　	}

　　整个的代码执行过程。首先调用HTTP.HandleFunc，按顺序做了几件事：

　　1)调用了DefaultServeMux的HandleFunc

　　2)调用了DefaultServeMux的Handle

　　3)往DefaultServeMux的map [string] muxEntry中增加对应的handler和路由规则

　　4)其次调用HTTP.ListenAndServe(":8010",nil)，

　　5)实例化Server；

　　6)调用Server的ListenAndServe()；

　　7)调用net.Listen("tcp",addr)监听端口；

　　8)启动一个for循环，在循环体中Accept请求；

　　9)对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务goc.serve()；

　　10)读取每个请求的内容w,err:=c.readRequest()；

　　11)判断handler是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux；

　　12)调用handler的ServeHTTP；

　　13)在这个例子中，下面就进入到DefaultServeMux.ServeHTTP；

　　14)根据request选择handler，并且进入到这个handler的ServeHTTP；

　　15)选择handler：

　　①判断是否有路由能满足这个request（循环遍历ServeMux的muxEntry），

　　②如果有路由满足，调用这个路由handler的ServeHTTP，

　　③如果没有路由满足，调用NotFoundHandler的ServeHTTP。

　　4.2Mark服务器的整体框架

　　下面是 Go实现Mark服务器的工作模式的流程图：


　　1.创建ListenSocket,监听指定的端口，等待客户端请求到来。

　　2.ListenSocket接受客户端的请求，得到ClientSocket,接下来通过ClientSocket与客户端通信。

　　3.处理客户端的请求，首先从ClientSocket读取HTTP请求的协议头，如果是POST方法，还可能要读取客户端提交的数据，然后交给相应的handler处理请求，handler处理完毕准备好客户端需要的数据，通过ClientSocket写给客户端。

　　4.3Mark服务器的代码与实现

　　Go语言创建一个服务器的步骤非常简单，只要调用ListenAndServe并传入网络地址以及负责处理请求的处理器(handler)作为参数就可以了。如果网络地址为空字符串，那么服务器默认使用8010端口进行网络连接；如果处理器参数为nil,那么服务器将使用默认的多路复用器DefaultServeMux。代码实现:


　　除了可以通过ListenAndServe的参数对服务器的网络地址和处理器进行配置之外，还可以通过Server结构对服务器进行更详细的配置，其中包括为请求读取操作设置超时时间，为响应写入操作设置超时时间、为Server结构设置错误日志记录器等。

　　核心代码如下：

　　package main

　　import(

　　	"encoding/json"

　　	"flag"

　　	"fmt"

　　	"html/template"

　　	"io"

　　	"io/ioutil"

　　	"log"

　　	"net/HTTP"

　　	"strings"

　　)

　　typepage struct{

　　	Title string

　　	Body [] byte

　　}

　　type data struct{

　　	Name string

　　	Password string

　　}

　　typeret struct{

　　	Code int

　　	Param string

　　	Msg string

　　	Data [] data

　　}

　　func (p*page) save() error{

　　	f:=p.Title+".txt"

　　	return ioutil.WriteFile(f,p.Body,0600)

　　}

　　func load(titlestring)(*page,error){

　　	f:=title+".txt"

　　	body,err:=ioutil.ReadFile(f)

　　	if err!=nil{

　　		return nil,err

　　	}

　　	return &page{Title:title,Body:body},nil

　　}

　　Mark服务器对于加载模板信息也进行了函数封装，下面的函数就是调用处理模板函数，能够对静态文件进行处理，例如上面提到的html文件以及txt文件。引入模板加载函数，调入函数所需的参数，直接处理这个路径请求。

　　func view(w HTTP.ResponseWriter,r *HTTP.Request){

　　	title:=r.URL.Path[len("/test/"):]

　　	p,_:=load(title)

　　	tmplView.ExecuteTemplate(w,"base",p)

　　	

　　}

　　func edit(w HTTP.ResponseWriter,r *HTTP.Request){

　　	title:=r.URL.Path[len("/edit/"):]

　　	p,_:=load(title)

　　	tmplEdit.ExecuteTemplate(w,"base",p)

　　	

　　}

　　func content(w HTTP.ResponseWriter,r *HTTP.Request){

　　	title:=r.URL.Path[len("/content/"):]

　　	p,_:=load(title)

　　	tmplContent.ExecuteTemplate(w,"base",p)

　　}

　　func save(w HTTP.ResponseWriter,r  *HTTP.Request){

　　	title:=r.URL.Path[len("/save/"):]

　　	body:=r.FormValue("body")

　　	p:=&page{Title:title,Body:[]byte(body)}

　　	p.save()

　　	HTTP.Redirect(w,r,"/test/"+title,HTTP.StatusFound)

　　}

　　typ emyHandler struct{}

　　func (*myHandler)ServeHTTP(w HTTP.ResponseWriter,r *HTTP.Request){

　　	w.Write([]byte("hellov2,therequestURLis:"+r.URL.String()))

　　}

　　func sayHello(w HTTP.ResponseWriter,r *HTTP.Request){

　　	w.Write([]byte("hellov2,the request URLis:"+r.URL.String()))

　　}

　　在前面的路由方法实现的前提下，我们对路由也进行了重定向的处理。下面的方法就是对web的路由重定向进行了封装。

　　func redirect(w HTTP.ResponseWriter,r *HTTP.Request){

　　	title:="localhost:8010"

　　	HTTP.Redirect(w,r,title,HTTP.StatusFound)

　　}

　　func getInfo(w HTTP.ResponseWriter,req *HTTP.Request){

　　	data:=data{Name:"liujian",Password:"123"}

　　	ret:=new(ret)

　　	id:=req.FormValue("id")

　　	//id:=req.PostFormValue('id')

　　	ret.Code=0

　　	ret.Param=id

　　	ret.Msg="success"

　　	ret.Data=append(ret.Data,data)

　　	retJSON,_:=json.Marshal(ret)

　　	io.WriteString(w,string(retJSON))

　　}

　　func sayhelloName(w HTTP.ResponseWriter,r *HTTP.Request){

　　	r.ParseForm()

　　	fmt.Println(r.Form)

　　	fmt.Println("path:",r.URL.Path)

　　	fmt.Println("scheme:",r.URL.Scheme)

　　	fmt.Println(r.Form["url_long"])

　　	for k,v:=ranger.Form{

　　		fmt.Println("key:",k)

　　		fmt.Println("val:",strings.Join(v,""))

　　	}

　　	fmt.Fprintf(w,"HelloMark!")

　　}

　　func files(){

　　	files,err:=ioutil.ReadDir(".")

　　	if err!=nil{

　　		log.Fatal(err)

　　	}

　　	for_,file:=rangefiles{

　　		fmt.Println(file.Name())

　　	}

　　}

　　func main(){

　　	mux:=HTTP.NewServeMux()

　　	mux.Handle("/",&myHandler{})

　　	mux.HandleFunc("/hello",sayHello)

　　	mux.HandleFunc("/redirect",sayHello)

　　	port:=flag.String("p","8010","port")

　　	dir:=flag.String("d",".","dir")

　　	flag.Parse()

　　	HTTP.Handle("/",HTTP.FileServer(HTTP.Dir(*dir)))

　　	HTTP.HandleFunc("/hello",sayHello)

　　	HTTP.HandleFunc("/www/redirect",redirect)

　　	HTTP.HandleFunc("/getInfo",getInfo)

　　	HTTP.Handle("/static/",HTTP.StripPrefix("/static/",										HTTP.FileServer(HTTP.Dir("static"))))

　　	HTTP.HandleFunc("/test/",view)

　　	HTTP.HandleFunc("/edit/",edit)

　　	HTTP.HandleFunc("/content/",content)

　　	HTTP.HandleFunc("/save/",save)

　　	log.Printf("LogprintisServer%sonHTTP:%s\n",*dir,*port)

　　	log.Fatal(HTTP.ListenAndServe(":"+*port,nil))

　　	log.Fatal(HTTP.ListenAndServe(":"+*port,mux))

　　}

　　4.4启动Mark服务器

　　服务器应用程序打包为一个.zip或者.tar文件，方便Windows平台和类Unix平台解压,这也是为什么大多数软件的压缩格式都是这两种，因为类Unix平台对于rar格式并不原生支持。解压完之后的文件结构如下:

　　/server:里面有exe可执行脚本，在windows平台上可以直接运行，用来启动服务器。

　　 /src:项目文件，包含了html页面，文件压缩包。

　　/static:应用程序的静态文件，包含一些css文件，fonts文件，js文件。

　　/logs:日志文件。

　　/temp:临时文件。

　　 /www:应用程序所在的目录。

　　Readme.md:对于Mark服务器应用程序说明解释。

　　4.4.1windows系统启动

　　在windows系统下面只需点击主目录下的exe可执行文件即可运行服务器，当看到可执行文件显示Markwebserverstarted即说明服务器启动成功。

　　

　　4.4.2mac系统启动

　　在类Unix系统下面要确保当前系统安装好了Go语言的环境，然后在cmd里面输入gorunmain.go即可直接运行。


　　可以从我们的官方网站（www.mark.com）上下载压缩包,或者从github下载源码，项目采用Go语言进行构建，所以你需要确保你的电脑有Go语言的环境（windows环境下面则不需要安装Go的环境，直接点击main.exe可执行文件即可运行）。

　　